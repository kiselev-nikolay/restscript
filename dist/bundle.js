/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/restscript/grammar.ne":
/*!***********************************!*\
  !*** ./src/restscript/grammar.ne ***!
  \***********************************/
/***/ ((module) => {

eval("// Generated automatically by nearley, version unknown\n// http://github.com/Hardmath123/nearley\n(function () {\nfunction id(x) { return x[0]; }\n\nconst plain = d => d[0];\nconst inner = d => d[1];\nconst solid = d => d[0].join(\"\");\nconst flatten = d => d.flat()\nvar grammar = {\n    Lexer: undefined,\n    ParserRules: [\n    {\"name\": \"_$ebnf$1\", \"symbols\": []},\n    {\"name\": \"_$ebnf$1\", \"symbols\": [\"_$ebnf$1\", \"wschar\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"__$ebnf$1\", \"symbols\": [\"wschar\"]},\n    {\"name\": \"__$ebnf$1\", \"symbols\": [\"__$ebnf$1\", \"wschar\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"__\", \"symbols\": [\"__$ebnf$1\"], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"wschar\", \"symbols\": [/[ \\t\\n\\v\\f]/], \"postprocess\": id},\n    {\"name\": \"main\", \"symbols\": [\"_\", \"code\", \"_\"], \"postprocess\": inner},\n    {\"name\": \"code\", \"symbols\": [\"line\"], \"postprocess\": d => {return {cmd: d[0]}}},\n    {\"name\": \"code\", \"symbols\": [\"line\", \"code\"], \"postprocess\": d => {return {cmd: d[0], next: d[1]}}},\n    {\"name\": \"line\", \"symbols\": [\"_\", \"statement\", \"_\", {\"literal\":\"\\n\"}], \"postprocess\": inner},\n    {\"name\": \"statement\", \"symbols\": [\"method\", \"_\", \"link\"], \"postprocess\": d => {return {action: d[0], link: d[2]}}},\n    {\"name\": \"statement\", \"symbols\": [\"method\", \"_\", \"define\", \"_\", \"args\", \"_\", \"link\"], \"postprocess\": d => {return {action: d[0], define: {keyword: d[2], variables: d[4]}, link: d[6]}}},\n    {\"name\": \"statement\", \"symbols\": [\"method\", \"_\", \"define\", \"_\", \"escapedString\", \"_\", \"escapedString\"], \"postprocess\": d => {return {action: \"set header\", key: d[4][1].join(\"\"), value: d[6][1].join(\"\")}}},\n    {\"name\": \"method$string$1\", \"symbols\": [{\"literal\":\"g\"}, {\"literal\":\"e\"}, {\"literal\":\"t\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"method\", \"symbols\": [\"method$string$1\"], \"postprocess\": plain},\n    {\"name\": \"method$string$2\", \"symbols\": [{\"literal\":\"p\"}, {\"literal\":\"o\"}, {\"literal\":\"s\"}, {\"literal\":\"t\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"method\", \"symbols\": [\"method$string$2\"], \"postprocess\": plain},\n    {\"name\": \"method$string$3\", \"symbols\": [{\"literal\":\"s\"}, {\"literal\":\"e\"}, {\"literal\":\"t\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"method\", \"symbols\": [\"method$string$3\"], \"postprocess\": plain},\n    {\"name\": \"define$string$1\", \"symbols\": [{\"literal\":\"j\"}, {\"literal\":\"s\"}, {\"literal\":\"o\"}, {\"literal\":\"n\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"define\", \"symbols\": [\"define$string$1\"], \"postprocess\": plain},\n    {\"name\": \"define$string$2\", \"symbols\": [{\"literal\":\"f\"}, {\"literal\":\"o\"}, {\"literal\":\"r\"}, {\"literal\":\"m\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"define\", \"symbols\": [\"define$string$2\"], \"postprocess\": plain},\n    {\"name\": \"define$string$3\", \"symbols\": [{\"literal\":\"p\"}, {\"literal\":\"a\"}, {\"literal\":\"r\"}, {\"literal\":\"a\"}, {\"literal\":\"m\"}, {\"literal\":\"s\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"define\", \"symbols\": [\"define$string$3\"], \"postprocess\": plain},\n    {\"name\": \"define$string$4\", \"symbols\": [{\"literal\":\"h\"}, {\"literal\":\"e\"}, {\"literal\":\"a\"}, {\"literal\":\"d\"}, {\"literal\":\"e\"}, {\"literal\":\"r\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"define\", \"symbols\": [\"define$string$4\"], \"postprocess\": plain},\n    {\"name\": \"define$string$5\", \"symbols\": [{\"literal\":\"a\"}, {\"literal\":\"s\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"define\", \"symbols\": [\"define$string$5\"], \"postprocess\": plain},\n    {\"name\": \"args\", \"symbols\": [\"arg\"], \"postprocess\": d => {return {key: d[0][0], from: d[0][1]}}},\n    {\"name\": \"args\", \"symbols\": [\"arg\", {\"literal\":\",\"}, \"args\"], \"postprocess\": d => {return {key: d[0][0], from: d[0][1], next: d[2]}}},\n    {\"name\": \"args\", \"symbols\": [\"arg\", {\"literal\":\",\"}, \"_\", \"args\"], \"postprocess\": d => {return {key: d[0][0], from: d[0][1], next: d[3]}}},\n    {\"name\": \"arg\", \"symbols\": [\"str\"]},\n    {\"name\": \"arg\", \"symbols\": [\"str\", {\"literal\":\"=\"}, \"str\"], \"postprocess\": d => [d[0], d[2]]},\n    {\"name\": \"str$ebnf$1\", \"symbols\": [/[\\w]/]},\n    {\"name\": \"str$ebnf$1\", \"symbols\": [\"str$ebnf$1\", /[\\w]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"str\", \"symbols\": [\"str$ebnf$1\"], \"postprocess\": solid},\n    {\"name\": \"protocol$string$1\", \"symbols\": [{\"literal\":\"h\"}, {\"literal\":\"t\"}, {\"literal\":\"t\"}, {\"literal\":\"p\"}, {\"literal\":\":\"}, {\"literal\":\"/\"}, {\"literal\":\"/\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"protocol\", \"symbols\": [\"protocol$string$1\"], \"postprocess\": plain},\n    {\"name\": \"protocol$string$2\", \"symbols\": [{\"literal\":\"h\"}, {\"literal\":\"t\"}, {\"literal\":\"t\"}, {\"literal\":\"p\"}, {\"literal\":\"s\"}, {\"literal\":\":\"}, {\"literal\":\"/\"}, {\"literal\":\"/\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"protocol\", \"symbols\": [\"protocol$string$2\"], \"postprocess\": plain},\n    {\"name\": \"url$ebnf$1\", \"symbols\": [/[\\S]/]},\n    {\"name\": \"url$ebnf$1\", \"symbols\": [\"url$ebnf$1\", /[\\S]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"url\", \"symbols\": [\"url$ebnf$1\"], \"postprocess\": solid},\n    {\"name\": \"link\", \"symbols\": [\"url\"], \"postprocess\": d => {return {protocol: \"\", url: d[0]}}},\n    {\"name\": \"link\", \"symbols\": [\"protocol\", \"url\"], \"postprocess\": d => {return {protocol: d[0], url: d[1]}}},\n    {\"name\": \"escapedString$ebnf$1\", \"symbols\": [/[^\"]/]},\n    {\"name\": \"escapedString$ebnf$1\", \"symbols\": [\"escapedString$ebnf$1\", /[^\"]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"escapedString\", \"symbols\": [{\"literal\":\"\\\"\"}, \"escapedString$ebnf$1\", {\"literal\":\"\\\"\"}]}\n]\n  , ParserStart: \"main\"\n}\nif ( true&& typeof module.exports !== 'undefined') {\n   module.exports = grammar;\n} else {\n   window.grammar = grammar;\n}\n})();\n\n\n//# sourceURL=webpack://restscript/./src/restscript/grammar.ne?");

/***/ }),

/***/ "./node_modules/nearley/lib/nearley.js":
/*!*********************************************!*\
  !*** ./node_modules/nearley/lib/nearley.js ***!
  \*********************************************/
/***/ (function(module) {

eval("(function(root, factory) {\n    if ( true && module.exports) {\n        module.exports = factory();\n    } else {\n        root.nearley = factory();\n    }\n}(this, function() {\n\n    function Rule(name, symbols, postprocess) {\n        this.id = ++Rule.highestId;\n        this.name = name;\n        this.symbols = symbols;        // a list of literal | regex class | nonterminal\n        this.postprocess = postprocess;\n        return this;\n    }\n    Rule.highestId = 0;\n\n    Rule.prototype.toString = function(withCursorAt) {\n        var symbolSequence = (typeof withCursorAt === \"undefined\")\n                             ? this.symbols.map(getSymbolShortDisplay).join(' ')\n                             : (   this.symbols.slice(0, withCursorAt).map(getSymbolShortDisplay).join(' ')\n                                 + \" ● \"\n                                 + this.symbols.slice(withCursorAt).map(getSymbolShortDisplay).join(' ')     );\n        return this.name + \" → \" + symbolSequence;\n    }\n\n\n    // a State is a rule at a position from a given starting point in the input stream (reference)\n    function State(rule, dot, reference, wantedBy) {\n        this.rule = rule;\n        this.dot = dot;\n        this.reference = reference;\n        this.data = [];\n        this.wantedBy = wantedBy;\n        this.isComplete = this.dot === rule.symbols.length;\n    }\n\n    State.prototype.toString = function() {\n        return \"{\" + this.rule.toString(this.dot) + \"}, from: \" + (this.reference || 0);\n    };\n\n    State.prototype.nextState = function(child) {\n        var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);\n        state.left = this;\n        state.right = child;\n        if (state.isComplete) {\n            state.data = state.build();\n            // Having right set here will prevent the right state and its children\n            // form being garbage collected\n            state.right = undefined;\n        }\n        return state;\n    };\n\n    State.prototype.build = function() {\n        var children = [];\n        var node = this;\n        do {\n            children.push(node.right.data);\n            node = node.left;\n        } while (node.left);\n        children.reverse();\n        return children;\n    };\n\n    State.prototype.finish = function() {\n        if (this.rule.postprocess) {\n            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);\n        }\n    };\n\n\n    function Column(grammar, index) {\n        this.grammar = grammar;\n        this.index = index;\n        this.states = [];\n        this.wants = {}; // states indexed by the non-terminal they expect\n        this.scannable = []; // list of states that expect a token\n        this.completed = {}; // states that are nullable\n    }\n\n\n    Column.prototype.process = function(nextColumn) {\n        var states = this.states;\n        var wants = this.wants;\n        var completed = this.completed;\n\n        for (var w = 0; w < states.length; w++) { // nb. we push() during iteration\n            var state = states[w];\n\n            if (state.isComplete) {\n                state.finish();\n                if (state.data !== Parser.fail) {\n                    // complete\n                    var wantedBy = state.wantedBy;\n                    for (var i = wantedBy.length; i--; ) { // this line is hot\n                        var left = wantedBy[i];\n                        this.complete(left, state);\n                    }\n\n                    // special-case nullables\n                    if (state.reference === this.index) {\n                        // make sure future predictors of this rule get completed.\n                        var exp = state.rule.name;\n                        (this.completed[exp] = this.completed[exp] || []).push(state);\n                    }\n                }\n\n            } else {\n                // queue scannable states\n                var exp = state.rule.symbols[state.dot];\n                if (typeof exp !== 'string') {\n                    this.scannable.push(state);\n                    continue;\n                }\n\n                // predict\n                if (wants[exp]) {\n                    wants[exp].push(state);\n\n                    if (completed.hasOwnProperty(exp)) {\n                        var nulls = completed[exp];\n                        for (var i = 0; i < nulls.length; i++) {\n                            var right = nulls[i];\n                            this.complete(state, right);\n                        }\n                    }\n                } else {\n                    wants[exp] = [state];\n                    this.predict(exp);\n                }\n            }\n        }\n    }\n\n    Column.prototype.predict = function(exp) {\n        var rules = this.grammar.byName[exp] || [];\n\n        for (var i = 0; i < rules.length; i++) {\n            var r = rules[i];\n            var wantedBy = this.wants[exp];\n            var s = new State(r, 0, this.index, wantedBy);\n            this.states.push(s);\n        }\n    }\n\n    Column.prototype.complete = function(left, right) {\n        var copy = left.nextState(right);\n        this.states.push(copy);\n    }\n\n\n    function Grammar(rules, start) {\n        this.rules = rules;\n        this.start = start || this.rules[0].name;\n        var byName = this.byName = {};\n        this.rules.forEach(function(rule) {\n            if (!byName.hasOwnProperty(rule.name)) {\n                byName[rule.name] = [];\n            }\n            byName[rule.name].push(rule);\n        });\n    }\n\n    // So we can allow passing (rules, start) directly to Parser for backwards compatibility\n    Grammar.fromCompiled = function(rules, start) {\n        var lexer = rules.Lexer;\n        if (rules.ParserStart) {\n          start = rules.ParserStart;\n          rules = rules.ParserRules;\n        }\n        var rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });\n        var g = new Grammar(rules, start);\n        g.lexer = lexer; // nb. storing lexer on Grammar is iffy, but unavoidable\n        return g;\n    }\n\n\n    function StreamLexer() {\n      this.reset(\"\");\n    }\n\n    StreamLexer.prototype.reset = function(data, state) {\n        this.buffer = data;\n        this.index = 0;\n        this.line = state ? state.line : 1;\n        this.lastLineBreak = state ? -state.col : 0;\n    }\n\n    StreamLexer.prototype.next = function() {\n        if (this.index < this.buffer.length) {\n            var ch = this.buffer[this.index++];\n            if (ch === '\\n') {\n              this.line += 1;\n              this.lastLineBreak = this.index;\n            }\n            return {value: ch};\n        }\n    }\n\n    StreamLexer.prototype.save = function() {\n      return {\n        line: this.line,\n        col: this.index - this.lastLineBreak,\n      }\n    }\n\n    StreamLexer.prototype.formatError = function(token, message) {\n        // nb. this gets called after consuming the offending token,\n        // so the culprit is index-1\n        var buffer = this.buffer;\n        if (typeof buffer === 'string') {\n            var lines = buffer\n                .split(\"\\n\")\n                .slice(\n                    Math.max(0, this.line - 5), \n                    this.line\n                );\n\n            var nextLineBreak = buffer.indexOf('\\n', this.index);\n            if (nextLineBreak === -1) nextLineBreak = buffer.length;\n            var col = this.index - this.lastLineBreak;\n            var lastLineDigits = String(this.line).length;\n            message += \" at line \" + this.line + \" col \" + col + \":\\n\\n\";\n            message += lines\n                .map(function(line, i) {\n                    return pad(this.line - lines.length + i + 1, lastLineDigits) + \" \" + line;\n                }, this)\n                .join(\"\\n\");\n            message += \"\\n\" + pad(\"\", lastLineDigits + col) + \"^\\n\";\n            return message;\n        } else {\n            return message + \" at index \" + (this.index - 1);\n        }\n\n        function pad(n, length) {\n            var s = String(n);\n            return Array(length - s.length + 1).join(\" \") + s;\n        }\n    }\n\n    function Parser(rules, start, options) {\n        if (rules instanceof Grammar) {\n            var grammar = rules;\n            var options = start;\n        } else {\n            var grammar = Grammar.fromCompiled(rules, start);\n        }\n        this.grammar = grammar;\n\n        // Read options\n        this.options = {\n            keepHistory: false,\n            lexer: grammar.lexer || new StreamLexer,\n        };\n        for (var key in (options || {})) {\n            this.options[key] = options[key];\n        }\n\n        // Setup lexer\n        this.lexer = this.options.lexer;\n        this.lexerState = undefined;\n\n        // Setup a table\n        var column = new Column(grammar, 0);\n        var table = this.table = [column];\n\n        // I could be expecting anything.\n        column.wants[grammar.start] = [];\n        column.predict(grammar.start);\n        // TODO what if start rule is nullable?\n        column.process();\n        this.current = 0; // token index\n    }\n\n    // create a reserved token for indicating a parse fail\n    Parser.fail = {};\n\n    Parser.prototype.feed = function(chunk) {\n        var lexer = this.lexer;\n        lexer.reset(chunk, this.lexerState);\n\n        var token;\n        while (true) {\n            try {\n                token = lexer.next();\n                if (!token) {\n                    break;\n                }\n            } catch (e) {\n                // Create the next column so that the error reporter\n                // can display the correctly predicted states.\n                var nextColumn = new Column(this.grammar, this.current + 1);\n                this.table.push(nextColumn);\n                var err = new Error(this.reportLexerError(e));\n                err.offset = this.current;\n                err.token = e.token;\n                throw err;\n            }\n            // We add new states to table[current+1]\n            var column = this.table[this.current];\n\n            // GC unused states\n            if (!this.options.keepHistory) {\n                delete this.table[this.current - 1];\n            }\n\n            var n = this.current + 1;\n            var nextColumn = new Column(this.grammar, n);\n            this.table.push(nextColumn);\n\n            // Advance all tokens that expect the symbol\n            var literal = token.text !== undefined ? token.text : token.value;\n            var value = lexer.constructor === StreamLexer ? token.value : token;\n            var scannable = column.scannable;\n            for (var w = scannable.length; w--; ) {\n                var state = scannable[w];\n                var expect = state.rule.symbols[state.dot];\n                // Try to consume the token\n                // either regex or literal\n                if (expect.test ? expect.test(value) :\n                    expect.type ? expect.type === token.type\n                                : expect.literal === literal) {\n                    // Add it\n                    var next = state.nextState({data: value, token: token, isToken: true, reference: n - 1});\n                    nextColumn.states.push(next);\n                }\n            }\n\n            // Next, for each of the rules, we either\n            // (a) complete it, and try to see if the reference row expected that\n            //     rule\n            // (b) predict the next nonterminal it expects by adding that\n            //     nonterminal's start state\n            // To prevent duplication, we also keep track of rules we have already\n            // added\n\n            nextColumn.process();\n\n            // If needed, throw an error:\n            if (nextColumn.states.length === 0) {\n                // No states at all! This is not good.\n                var err = new Error(this.reportError(token));\n                err.offset = this.current;\n                err.token = token;\n                throw err;\n            }\n\n            // maybe save lexer state\n            if (this.options.keepHistory) {\n              column.lexerState = lexer.save()\n            }\n\n            this.current++;\n        }\n        if (column) {\n          this.lexerState = lexer.save()\n        }\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n\n        // Allow chaining, for whatever it's worth\n        return this;\n    };\n\n    Parser.prototype.reportLexerError = function(lexerError) {\n        var tokenDisplay, lexerMessage;\n        // Planning to add a token property to moo's thrown error\n        // even on erroring tokens to be used in error display below\n        var token = lexerError.token;\n        if (token) {\n            tokenDisplay = \"input \" + JSON.stringify(token.text[0]) + \" (lexer error)\";\n            lexerMessage = this.lexer.formatError(token, \"Syntax error\");\n        } else {\n            tokenDisplay = \"input (lexer error)\";\n            lexerMessage = lexerError.message;\n        }\n        return this.reportErrorCommon(lexerMessage, tokenDisplay);\n    };\n\n    Parser.prototype.reportError = function(token) {\n        var tokenDisplay = (token.type ? token.type + \" token: \" : \"\") + JSON.stringify(token.value !== undefined ? token.value : token);\n        var lexerMessage = this.lexer.formatError(token, \"Syntax error\");\n        return this.reportErrorCommon(lexerMessage, tokenDisplay);\n    };\n\n    Parser.prototype.reportErrorCommon = function(lexerMessage, tokenDisplay) {\n        var lines = [];\n        lines.push(lexerMessage);\n        var lastColumnIndex = this.table.length - 2;\n        var lastColumn = this.table[lastColumnIndex];\n        var expectantStates = lastColumn.states\n            .filter(function(state) {\n                var nextSymbol = state.rule.symbols[state.dot];\n                return nextSymbol && typeof nextSymbol !== \"string\";\n            });\n\n        if (expectantStates.length === 0) {\n            lines.push('Unexpected ' + tokenDisplay + '. I did not expect any more input. Here is the state of my parse table:\\n');\n            this.displayStateStack(lastColumn.states, lines);\n        } else {\n            lines.push('Unexpected ' + tokenDisplay + '. Instead, I was expecting to see one of the following:\\n');\n            // Display a \"state stack\" for each expectant state\n            // - which shows you how this state came to be, step by step.\n            // If there is more than one derivation, we only display the first one.\n            var stateStacks = expectantStates\n                .map(function(state) {\n                    return this.buildFirstStateStack(state, []) || [state];\n                }, this);\n            // Display each state that is expecting a terminal symbol next.\n            stateStacks.forEach(function(stateStack) {\n                var state = stateStack[0];\n                var nextSymbol = state.rule.symbols[state.dot];\n                var symbolDisplay = this.getSymbolDisplay(nextSymbol);\n                lines.push('A ' + symbolDisplay + ' based on:');\n                this.displayStateStack(stateStack, lines);\n            }, this);\n        }\n        lines.push(\"\");\n        return lines.join(\"\\n\");\n    }\n    \n    Parser.prototype.displayStateStack = function(stateStack, lines) {\n        var lastDisplay;\n        var sameDisplayCount = 0;\n        for (var j = 0; j < stateStack.length; j++) {\n            var state = stateStack[j];\n            var display = state.rule.toString(state.dot);\n            if (display === lastDisplay) {\n                sameDisplayCount++;\n            } else {\n                if (sameDisplayCount > 0) {\n                    lines.push('    ^ ' + sameDisplayCount + ' more lines identical to this');\n                }\n                sameDisplayCount = 0;\n                lines.push('    ' + display);\n            }\n            lastDisplay = display;\n        }\n    };\n\n    Parser.prototype.getSymbolDisplay = function(symbol) {\n        return getSymbolLongDisplay(symbol);\n    };\n\n    /*\n    Builds a the first state stack. You can think of a state stack as the call stack\n    of the recursive-descent parser which the Nearley parse algorithm simulates.\n    A state stack is represented as an array of state objects. Within a\n    state stack, the first item of the array will be the starting\n    state, with each successive item in the array going further back into history.\n\n    This function needs to be given a starting state and an empty array representing\n    the visited states, and it returns an single state stack.\n\n    */\n    Parser.prototype.buildFirstStateStack = function(state, visited) {\n        if (visited.indexOf(state) !== -1) {\n            // Found cycle, return null\n            // to eliminate this path from the results, because\n            // we don't know how to display it meaningfully\n            return null;\n        }\n        if (state.wantedBy.length === 0) {\n            return [state];\n        }\n        var prevState = state.wantedBy[0];\n        var childVisited = [state].concat(visited);\n        var childResult = this.buildFirstStateStack(prevState, childVisited);\n        if (childResult === null) {\n            return null;\n        }\n        return [state].concat(childResult);\n    };\n\n    Parser.prototype.save = function() {\n        var column = this.table[this.current];\n        column.lexerState = this.lexerState;\n        return column;\n    };\n\n    Parser.prototype.restore = function(column) {\n        var index = column.index;\n        this.current = index;\n        this.table[index] = column;\n        this.table.splice(index + 1);\n        this.lexerState = column.lexerState;\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n    };\n\n    // nb. deprecated: use save/restore instead!\n    Parser.prototype.rewind = function(index) {\n        if (!this.options.keepHistory) {\n            throw new Error('set option `keepHistory` to enable rewinding')\n        }\n        // nb. recall column (table) indicies fall between token indicies.\n        //        col 0   --   token 0   --   col 1\n        this.restore(this.table[index]);\n    };\n\n    Parser.prototype.finish = function() {\n        // Return the possible parsings\n        var considerations = [];\n        var start = this.grammar.start;\n        var column = this.table[this.table.length - 1]\n        column.states.forEach(function (t) {\n            if (t.rule.name === start\n                    && t.dot === t.rule.symbols.length\n                    && t.reference === 0\n                    && t.data !== Parser.fail) {\n                considerations.push(t);\n            }\n        });\n        return considerations.map(function(c) {return c.data; });\n    };\n\n    function getSymbolLongDisplay(symbol) {\n        var type = typeof symbol;\n        if (type === \"string\") {\n            return symbol;\n        } else if (type === \"object\") {\n            if (symbol.literal) {\n                return JSON.stringify(symbol.literal);\n            } else if (symbol instanceof RegExp) {\n                return 'character matching ' + symbol;\n            } else if (symbol.type) {\n                return symbol.type + ' token';\n            } else if (symbol.test) {\n                return 'token matching ' + String(symbol.test);\n            } else {\n                throw new Error('Unknown symbol type: ' + symbol);\n            }\n        }\n    }\n\n    function getSymbolShortDisplay(symbol) {\n        var type = typeof symbol;\n        if (type === \"string\") {\n            return symbol;\n        } else if (type === \"object\") {\n            if (symbol.literal) {\n                return JSON.stringify(symbol.literal);\n            } else if (symbol instanceof RegExp) {\n                return symbol.toString();\n            } else if (symbol.type) {\n                return '%' + symbol.type;\n            } else if (symbol.test) {\n                return '<' + String(symbol.test) + '>';\n            } else {\n                throw new Error('Unknown symbol type: ' + symbol);\n            }\n        }\n    }\n\n    return {\n        Parser: Parser,\n        Grammar: Grammar,\n        Rule: Rule,\n    };\n\n}));\n\n\n//# sourceURL=webpack://restscript/./node_modules/nearley/lib/nearley.js?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _restscript_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./restscript/editor */ \"./src/restscript/editor.ts\");\n\r\nvar codeEl = window.document.getElementById('code');\r\nvar rse = new _restscript_editor__WEBPACK_IMPORTED_MODULE_0__.RestScriptEditor(codeEl);\r\neval(\"window.RunRseCode = () => rse.run()\");\r\n\n\n//# sourceURL=webpack://restscript/./src/index.ts?");

/***/ }),

/***/ "./src/restscript/editor.ts":
/*!**********************************!*\
  !*** ./src/restscript/editor.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RestScriptEditor\": () => (/* binding */ RestScriptEditor)\n/* harmony export */ });\n/* harmony import */ var nearley__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nearley */ \"./node_modules/nearley/lib/nearley.js\");\n/* harmony import */ var nearley__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(nearley__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grammar_ne__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./grammar.ne */ \"./src/restscript/grammar.ne\");\n/* harmony import */ var _grammar_ne__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grammar_ne__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _highlight__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./highlight */ \"./src/restscript/highlight.ts\");\n/* harmony import */ var _run__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./run */ \"./src/restscript/run.ts\");\n\r\n\r\n\r\n\r\nvar GRAMMAR = nearley__WEBPACK_IMPORTED_MODULE_0__.Grammar.fromCompiled((_grammar_ne__WEBPACK_IMPORTED_MODULE_1___default()));\r\nvar Parsed = /** @class */ (function () {\r\n    function Parsed() {\r\n    }\r\n    return Parsed;\r\n}());\r\nvar RestScriptEditor = /** @class */ (function () {\r\n    function RestScriptEditor(el, logTime) {\r\n        var _this = this;\r\n        this.el = el;\r\n        this.logTime = logTime === true;\r\n        el.addEventListener('input', function () { return _this.update(); });\r\n        this.update();\r\n    }\r\n    RestScriptEditor.prototype.parse = function () {\r\n        var parsed = new Parsed();\r\n        parsed.result = null;\r\n        parsed.okLast = 0;\r\n        parsed.code = this.el.innerText;\r\n        parsed.code += \"\\n\";\r\n        try {\r\n            if (this.logTime) {\r\n                console.time(\"Parser 🥽\");\r\n            }\r\n            var parser = new nearley__WEBPACK_IMPORTED_MODULE_0__.Parser(GRAMMAR);\r\n            for (var i = 0; i < parsed.code.length; i++) {\r\n                var state = parser.feed(parsed.code[i]).results;\r\n                if (state[0] !== null || state[0] !== undefined) {\r\n                    parsed.okLast = i;\r\n                }\r\n            }\r\n            parsed.result = parser.finish()[0];\r\n        }\r\n        catch (_a) {\r\n            // Syntax error.\r\n        }\r\n        return parsed;\r\n    };\r\n    RestScriptEditor.prototype.update = function () {\r\n        if (this.logTime) {\r\n            console.time(\"Total ⏳\");\r\n        }\r\n        var parsed = this.parse();\r\n        if (this.logTime) {\r\n            console.timeEnd(\"Parser 🥽\");\r\n        }\r\n        if (this.logTime) {\r\n            console.time(\"Highlight 🎨\");\r\n        }\r\n        if (parsed.result === null || parsed.result === undefined) {\r\n            var errorText = '<span class=\"error-text\">' + parsed.code.slice(1 + parsed.code.lastIndexOf('\\n', parsed.okLast), parsed.okLast) + '</span>';\r\n            errorText += '<span class=\"error-text error-position\">' + parsed.code.slice(parsed.okLast, 1 + parsed.okLast) + '</span>';\r\n            errorText += '<span class=\"error-text\">' + parsed.code.slice(1 + parsed.okLast, 1 + parsed.code.indexOf('\\n', parsed.okLast)) + '</span>';\r\n            if (this.logTime) {\r\n                console.timeEnd(\"Highlight 🎨\");\r\n            }\r\n            document.getElementById('code-bg').innerHTML = parsed.code;\r\n            document.getElementById('result').innerHTML = '';\r\n            document.getElementById('syntax-error').innerHTML = 'Syntax error. ' + errorText;\r\n            if (this.logTime) {\r\n                console.timeEnd(\"Total ⏳\");\r\n            }\r\n            return;\r\n        }\r\n        var highlightedCode = (0,_highlight__WEBPACK_IMPORTED_MODULE_2__.highlight)(parsed.code, parsed.result);\r\n        if (this.logTime) {\r\n            console.timeEnd(\"Highlight 🎨\");\r\n        }\r\n        document.getElementById('code-bg').innerHTML = highlightedCode;\r\n        document.getElementById('result').innerHTML = JSON.stringify(parsed.result, null, 2);\r\n        document.getElementById('syntax-error').innerHTML = '';\r\n        if (this.logTime) {\r\n            console.timeEnd(\"Total ⏳\");\r\n        }\r\n        return;\r\n    };\r\n    RestScriptEditor.prototype.run = function () {\r\n        var parsed = this.parse();\r\n        (0,_run__WEBPACK_IMPORTED_MODULE_3__.runParsedCode)(parsed.result);\r\n    };\r\n    return RestScriptEditor;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://restscript/./src/restscript/editor.ts?");

/***/ }),

/***/ "./src/restscript/highlight.ts":
/*!*************************************!*\
  !*** ./src/restscript/highlight.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"highlight\": () => (/* binding */ highlight)\n/* harmony export */ });\nfunction highlight(code, result) {\r\n    var coloredCoded = '';\r\n    var insertColoredToken = function (x, tagClass, start) {\r\n        var tokenStart = code.indexOf(x, start);\r\n        var tokenEnd = start + x.length;\r\n        var pre = code.slice(start, tokenStart);\r\n        coloredCoded = coloredCoded\r\n            + pre\r\n            + '<span class=\"' + tagClass + '\">'\r\n            + x\r\n            + '</span>';\r\n        return tokenEnd + pre.length;\r\n    };\r\n    var insertColoredArg = function (variable, start) {\r\n        start = insertColoredToken(variable.key, 'chy', start);\r\n        if (variable.from !== undefined) {\r\n            start = insertColoredToken(variable.from, 'chy', start);\r\n        }\r\n        if (variable.next !== undefined) {\r\n            start = insertColoredArg(variable.next, start);\r\n        }\r\n        return start;\r\n    };\r\n    var colorCode = function (token, start) {\r\n        start = insertColoredToken(token.cmd.action, 'chr', start);\r\n        if (token.cmd.key !== undefined) {\r\n            start = insertColoredToken(\"\\\"\" + token.cmd.key + \"\\\"\", 'chg', start);\r\n            start = insertColoredToken(\"\\\"\" + token.cmd.value + \"\\\"\", 'chg', start);\r\n        }\r\n        else {\r\n            if (token.cmd.define !== undefined) {\r\n                start = insertColoredToken(token.cmd.define.keyword, 'chr', start);\r\n                start = insertColoredArg(token.cmd.define.variables, start);\r\n            }\r\n            start = insertColoredToken(token.cmd.link.protocol, 'chb', start);\r\n            start = insertColoredToken(token.cmd.link.url, 'chp', start);\r\n        }\r\n        if (token.next !== undefined) {\r\n            colorCode(token.next, start);\r\n        }\r\n    };\r\n    colorCode(result, 0);\r\n    console.log(JSON.stringify(result));\r\n    return coloredCoded;\r\n}\r\n\n\n//# sourceURL=webpack://restscript/./src/restscript/highlight.ts?");

/***/ }),

/***/ "./src/restscript/run.ts":
/*!*******************************!*\
  !*** ./src/restscript/run.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"runParsedCode\": () => (/* binding */ runParsedCode)\n/* harmony export */ });\nfunction runParsedCode(parsedCode) {\r\n    var h = [];\r\n    var state = new Map();\r\n    var runCmd = function (token) {\r\n        switch (token.cmd.action) {\r\n            case \"get\":\r\n                fetch(\"//\" + token.cmd.link.url)\r\n                    .then(function (r) { return r.json(); })\r\n                    .then(function (r) {\r\n                    // TODO: read response and save to state\r\n                    console.log(r);\r\n                    runCmd(token.next);\r\n                });\r\n                return;\r\n            case \"post\":\r\n                // TODO: post state data encoded as define-keyword from defined variables\r\n                console.log(\"post\", token.cmd.link);\r\n                return;\r\n            case \"set header\":\r\n                h.push({ k: token.cmd.key, v: token.cmd.value });\r\n        }\r\n        if (token.next !== undefined) {\r\n            runCmd(token.next);\r\n        }\r\n    };\r\n    runCmd(parsedCode);\r\n}\r\n\n\n//# sourceURL=webpack://restscript/./src/restscript/run.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;